"""
:Author: Zachary T. Varley
:Date: December 2024
:PyTorch Code License: MIT

______________________________________________________________________________
Rational Coefficients for Exponential Integrals E1(x) and Ei(x) come from Boost:
https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/expint.hpp

and fall under the Boost Software License:

Copyright John Maddock 2007. 

Copyright Matt Borland 2024. 

Use, modification and distribution are subject to the Boost Software License,
Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
______________________________________________________________________________

This module computes the Born approximation of the complex valued electron
scattering factor due to thermal diffuse scattering (TDS) using imaginary values
from:

Weickenmeier, A., and H. Kohl. “Computation of Absorptive Form Factors for
High-Energy Electron Diffraction.” Acta Crystallographica Section A Foundations
of Crystallography, vol. 47, no. 5, Sept. 1991, pp. 590–97. DOI.org (Crossref),
https://doi.org/10.1107/S0108767391004804.

and the real part from the fit reported by Labato and Van Dyck (LVD):

Lobato, I., and D. Van Dyck. “An Accurate Parameterization for Scattering
Factors, Electron Densities and Electrostatic Potentials for Neutral Atoms That
Obey All Physical Constraints.” Acta Crystallographica Section A Foundations and
Advances, vol. 70, no. 6, Nov. 2014, pp. 636–49. DOI.org (Crossref),
https://doi.org/10.1107/S205327331401643X.

Notes:

Overall, I looked at the results from this paper and coded it up myself:

Thomas, M., et al. “Parameterized Absorptive Electron Scattering Factors.” Acta
Crystallographica Section A Foundations and Advances, vol. 80, no. 2, Mar. 2024,
pp. 146–50. DOI.org (Crossref), https://doi.org/10.1107/S2053273323010963.

And I found that the WK imaginary portion agrees with the manual numerical
integration of the LVD fit to high enough accuracy. The imaginary part of the
scattering factor from WK does not show the same clear poor fitting as is in the
real portion due to fitting computed tables with exponential functions (done so
that an analytical form of the integration is available). So a natural solution
is to use the LVD fit for the real portion and the WK fit for the imaginary
portion. That's what this file does. If in the future torch.special adds a
compiled expi, that should be used instead of jit compiling the Boost port.

We clamp the imaginary part of the scattering factor to zero, quoting section 2
of the paper:

Thomas, M., et al. “Parameterized Absorptive Electron Scattering Factors.” Acta
Crystallographica Section A Foundations and Advances, vol. 80, no. 2, Mar. 2024,
pp. 146–50. DOI.org (Crossref), https://doi.org/10.1107/S2053273323010963.

"In equation (1), multiplying by the temperature factor, exp(-B_iso s^2),
ensures that the function smoothly asymptotes to zero. Without it, the
absorptive form factor instead behaves as -exp(s) for large s paired with any
B_iso > 0.05 A^2 (Peng et al., 1996b). This results in large negative βf' at
large s, which implies amplification, rather than absorption, of the electron
beam and we consider this to be unphysical. We therefore set βf' to zero where
equation (2) returns a negative value."

"""

import torch
from torch import Tensor
from typing import List, Union

wk_A_param = torch.tensor(
    [
        [0.00427, 0.00957, 0.00802, 0.00209],
        [0.01217, 0.02616, -0.00884, 0.01841],
        [0.00251, 0.03576, 0.00988, 0.02370],
        [0.01596, 0.02959, 0.04024, 0.01001],
        [0.03652, 0.01140, 0.05677, 0.01506],
        [0.04102, 0.04911, 0.05296, 0.00061],
        [0.04123, 0.05740, 0.06529, 0.00373],
        [0.03547, 0.03133, 0.10865, 0.01615],
        [0.03957, 0.07225, 0.09581, 0.00792],
        [0.02597, 0.02197, 0.13762, 0.05394],
        [0.03283, 0.08858, 0.11688, 0.02516],
        [0.03833, 0.17124, 0.03649, 0.04134],
        [0.04388, 0.17743, 0.05047, 0.03957],
        [0.03812, 0.17833, 0.06280, 0.05605],
        [0.04166, 0.17817, 0.09479, 0.04463],
        [0.04003, 0.18346, 0.12218, 0.03753],
        [0.04245, 0.17645, 0.15814, 0.03011],
        [0.05011, 0.16667, 0.17074, 0.04358],
        [0.04058, 0.17582, 0.20943, 0.02922],
        [0.04001, 0.17416, 0.20986, 0.05497],
        [0.09685, 0.14777, 0.20981, 0.04852],
        [0.06667, 0.17356, 0.22710, 0.05957],
        [0.05118, 0.16791, 0.26700, 0.06476],
        [0.03204, 0.18460, 0.30764, 0.05052],
        [0.03866, 0.17782, 0.31329, 0.06898],
        [0.05455, 0.16660, 0.33208, 0.06947],
        [0.05942, 0.17472, 0.34423, 0.06828],
        [0.06049, 0.16600, 0.37302, 0.07109],
        [0.08034, 0.15838, 0.40116, 0.05467],
        [0.02948, 0.19200, 0.42222, 0.07480],
        [0.16157, 0.32976, 0.18964, 0.06148],
        [0.16184, 0.35705, 0.17618, 0.07133],
        [0.06190, 0.18452, 0.41600, 0.12793],
        [0.15913, 0.41583, 0.13385, 0.10549],
        [0.16514, 0.41202, 0.12900, 0.13209],
        [0.15798, 0.41181, 0.14254, 0.14987],
        [0.16535, 0.44674, 0.24245, 0.03161],
        [0.16039, 0.44470, 0.24661, 0.05840],
        [0.16619, 0.44376, 0.25613, 0.06797],
        [0.16794, 0.44505, 0.27188, 0.07313],
        [0.16552, 0.45008, 0.30474, 0.06161],
        [0.17327, 0.44679, 0.32441, 0.06143],
        [0.16424, 0.45046, 0.33749, 0.07766],
        [0.18750, 0.44919, 0.36323, 0.05388],
        [0.16081, 0.45211, 0.40343, 0.06140],
        [0.16599, 0.43951, 0.41478, 0.08142],
        [0.16547, 0.44658, 0.45401, 0.05959],
        [0.17154, 0.43689, 0.46392, 0.07725],
        [0.15752, 0.44821, 0.48186, 0.08596],
        [0.15732, 0.44563, 0.48507, 0.10948],
        [0.16971, 0.42742, 0.48779, 0.13653],
        [0.14927, 0.43729, 0.49444, 0.16440],
        [0.18053, 0.44724, 0.48163, 0.15995],
        [0.13141, 0.43855, 0.50035, 0.22299],
        [0.31397, 0.55648, 0.39828, 0.04852],
        [0.32756, 0.53927, 0.39830, 0.07607],
        [0.30887, 0.53804, 0.42265, 0.09559],
        [0.28398, 0.53568, 0.46662, 0.10282],
        [0.35160, 0.56889, 0.42010, 0.07246],
        [0.33810, 0.58035, 0.44442, 0.07413],
        [0.35449, 0.59626, 0.43868, 0.07152],
        [0.35559, 0.60598, 0.45165, 0.07168],
        [0.38379, 0.64088, 0.41710, 0.06708],
        [0.40352, 0.64303, 0.40488, 0.08137],
        [0.36838, 0.64761, 0.47222, 0.06854],
        [0.38514, 0.68422, 0.44359, 0.06775],
        [0.37280, 0.67528, 0.47337, 0.08320],
        [0.39335, 0.70093, 0.46774, 0.06658],
        [0.40587, 0.71223, 0.46598, 0.06847],
        [0.39728, 0.73368, 0.47795, 0.06759],
        [0.40697, 0.73576, 0.47481, 0.08291],
        [0.40122, 0.78861, 0.44658, 0.08799],
        [0.41127, 0.76965, 0.46563, 0.10180],
        [0.39978, 0.77171, 0.48541, 0.11540],
        [0.39130, 0.80752, 0.48702, 0.11041],
        [0.40436, 0.80701, 0.48445, 0.12438],
        [0.38816, 0.80163, 0.51922, 0.13514],
        [0.39551, 0.80409, 0.53365, 0.13485],
        [0.40850, 0.83052, 0.53325, 0.11978],
        [0.40092, 0.85415, 0.53346, 0.12747],
        [0.41872, 0.88168, 0.54551, 0.09404],
        [0.43358, 0.88007, 0.52966, 0.12059],
        [0.40858, 0.87837, 0.56392, 0.13698],
        [0.41637, 0.85094, 0.57749, 0.16700],
        [0.38951, 0.83297, 0.60557, 0.20770],
        [0.41677, 0.88094, 0.55170, 0.21029],
        [0.50089, 1.00860, 0.51420, 0.05996],
        [0.47470, 0.99363, 0.54721, 0.09206],
        [0.47810, 0.98385, 0.54905, 0.12055],
        [0.47903, 0.97455, 0.55883, 0.14309],
        [0.48351, 0.98292, 0.58877, 0.12425],
        [0.48664, 0.98057, 0.61483, 0.12136],
        [0.46078, 0.97139, 0.66506, 0.13012],
        [0.49148, 0.98583, 0.67674, 0.09725],
        [0.50865, 0.98574, 0.68109, 0.09977],
        [0.46259, 0.97882, 0.73056, 0.12723],
        [0.46221, 0.95749, 0.76259, 0.14086],
        [0.48500, 0.95602, 0.77234, 0.13374],
    ]
)

wk_B_param = torch.tensor(
    [
        [4.17218, 16.05892, 26.78365, 69.45643],
        [1.83008, 7.20225, 16.13585, 18.75551],
        [0.02620, 2.00907, 10.80597, 130.49226],
        [0.38968, 1.99268, 46.86913, 108.84167],
        [0.50627, 3.68297, 27.90586, 74.98296],
        [0.41335, 10.98289, 34.80286, 177.19113],
        [0.29792, 7.84094, 22.58809, 72.59254],
        [0.17964, 2.60856, 11.79972, 38.02912],
        [0.16403, 3.96612, 12.43903, 40.05053],
        [0.09101, 0.41253, 5.02463, 17.52954],
        [0.06008, 2.07182, 7.64444, 146.00952],
        [0.07424, 2.87177, 18.06729, 97.00854],
        [0.09086, 2.53252, 30.43883, 98.26737],
        [0.05396, 1.86461, 22.54263, 72.43144],
        [0.05564, 1.62500, 24.45354, 64.38264],
        [0.05214, 1.40793, 23.35691, 53.59676],
        [0.04643, 1.15677, 19.34091, 52.88785],
        [0.07991, 1.01436, 15.67109, 39.60819],
        [0.03352, 0.82984, 14.13679, 200.97722],
        [0.02289, 0.71288, 11.18914, 135.02390],
        [0.12527, 1.34248, 12.43524, 131.71112],
        [0.05198, 0.86467, 10.59984, 103.56776],
        [0.03786, 0.57160, 8.30305, 91.78068],
        [0.00240, 0.44931, 7.92251, 86.64058],
        [0.01836, 0.41203, 6.73736, 76.30466],
        [0.03947, 0.43294, 6.26864, 71.29470],
        [0.03962, 0.43253, 6.05175, 68.72437],
        [0.03558, 0.39976, 5.36660, 62.46894],
        [0.05475, 0.45736, 5.38252, 60.43276],
        [0.00137, 0.26535, 4.48040, 54.26088],
        [0.10455, 2.18391, 9.04125, 75.16958],
        [0.09890, 2.06856, 9.89926, 68.13783],
        [0.01642, 0.32542, 3.51888, 44.50604],
        [0.07669, 1.89297, 11.31554, 46.32082],
        [0.08199, 1.76568, 9.87254, 38.10640],
        [0.06939, 1.53446, 8.98025, 33.04365],
        [0.07044, 1.59236, 17.53592, 215.26198],
        [0.06199, 1.41265, 14.33812, 152.80257],
        [0.06364, 1.34205, 13.66551, 125.72522],
        [0.06565, 1.25292, 13.09355, 109.50252],
        [0.05921, 1.15624, 13.24924, 98.69958],
        [0.06162, 1.11236, 12.76149, 90.92026],
        [0.05081, 0.99771, 11.28925, 84.28943],
        [0.05120, 1.08672, 12.23172, 85.27316],
        [0.04662, 0.85252, 10.51121, 74.53949],
        [0.04933, 0.79381, 9.30944, 41.17414],
        [0.04481, 0.75608, 9.34354, 67.91975],
        [0.04867, 0.71518, 8.40595, 64.24400],
        [0.03672, 0.64379, 7.83687, 73.37281],
        [0.03308, 0.60931, 7.04977, 64.83582],
        [0.04023, 0.58192, 6.29247, 55.57061],
        [0.02842, 0.50687, 5.60835, 48.28004],
        [0.03830, 0.58340, 6.47550, 47.08820],
        [0.02097, 0.41007, 4.52105, 37.18178],
        [0.07813, 1.45053, 15.05933, 199.48830],
        [0.08444, 1.40227, 13.12939, 160.56676],
        [0.07206, 1.19585, 11.55866, 127.31371],
        [0.05717, 0.98756, 9.95556, 117.31874],
        [0.08249, 1.43427, 12.37363, 150.55968],
        [0.07081, 1.31033, 11.44403, 144.17706],
        [0.07442, 1.38680, 11.54391, 143.72185],
        [0.07155, 1.34703, 11.00432, 140.09138],
        [0.07794, 1.55042, 11.89283, 142.79585],
        [0.08508, 1.60712, 11.45367, 116.64063],
        [0.06520, 1.32571, 10.16884, 134.69034],
        [0.06850, 1.43566, 10.57719, 131.88972],
        [0.06264, 1.26756, 9.46411, 107.50194],
        [0.06750, 1.35829, 9.76480, 127.40374],
        [0.06958, 1.38750, 9.41888, 122.10940],
        [0.06574, 1.31578, 9.13448, 120.98209],
        [0.06517, 1.29452, 8.67569, 100.34878],
        [0.06213, 1.30860, 9.18871, 91.20213],
        [0.06292, 1.23499, 8.42904, 77.59815],
        [0.05693, 1.15762, 7.83077, 67.14066],
        [0.05145, 1.11240, 8.33441, 65.71782],
        [0.05573, 1.11159, 8.00221, 57.35021],
        [0.04855, 0.99356, 7.38693, 51.75829],
        [0.04981, 0.97669, 7.38024, 44.52068],
        [0.05151, 1.00803, 8.03707, 45.01758],
        [0.04693, 0.98398, 7.83562, 46.51474],
        [0.05161, 1.02127, 9.18455, 64.88177],
        [0.05154, 1.03252, 8.49678, 58.79463],
        [0.04200, 0.90939, 7.71158, 57.79178],
        [0.04661, 0.87289, 6.84038, 51.36000],
        [0.04168, 0.73697, 5.86112, 43.78613],
        [0.04488, 0.83871, 6.44020, 43.51940],
        [0.05786, 1.20028, 13.85073, 172.15909],
        [0.05239, 1.03225, 11.49796, 143.12303],
        [0.05167, 0.98867, 10.52682, 112.18267],
        [0.04931, 0.95698, 9.61135, 95.44649],
        [0.04748, 0.93369, 9.89867, 102.06961],
        [0.04660, 0.89912, 9.69785, 100.23434],
        [0.04323, 0.78798, 8.71624, 92.30811],
        [0.04641, 0.85867, 9.51157, 111.02754],
        [0.04918, 0.87026, 9.41105, 104.98576],
        [0.03904, 0.72797, 8.00506, 86.41747],
        [0.03969, 0.68167, 7.29607, 75.72682],
        [0.04291, 0.69956, 7.38554, 77.18528],
    ]
)


# Lorentzian coeffs for electron scattering factor (Labato and Van Dyck)
# fmt: off
fit_LVD = torch.tensor(
[[6.473848488352918e-03,-4.901925767802290e-01,5.732841603908765e-01,-3.794033014839905e-01,5.544264747740791e-01,2.785198853791489e+00,2.776204283306448e+00,2.775385910506251e+00,2.767593028672588e+00,2.765118976429275e+00],
[3.057451160998355e+00,-6.200447791273253e+01,6.400555370846145e+01,-5.001325785427806e+00,1.517988287005264e-01,1.089672487260788e+00,9.398387981431211e-01,9.252890343862655e-01,8.229474987086506e-01,5.773931106754022e-01],
[3.926222728861479e+00,-4.548619626399980e+00,2.193353128786585e+00,6.994512650339657e-02,2.098642248519376e-03,8.142760135172804e+00,4.989410770078558e+00,4.144289992394109e+00,4.019223150656802e-01,1.564790347198236e-01],
[3.398249705570541e+00,-1.908668860956967e+00,3.907021175392274e-02,-1.116310102107145e-02,9.462044653575231e-03,4.442701786224095e+00,3.324515425264230e+00,1.897728803482149e-01,8.719186146446036e-02,8.278090600413406e-02],
[1.472792486393293e+00,-4.019330421993871e-01,3.059989569826894e-01,1.961442171731680e-02,9.771771060882025e-04,3.749740482818191e+00,5.880665361396738e-01,5.156396131030110e-01,1.213775700806037e-01,6.809824121603139e-02],
[1.244660886213433e+02,-2.203528570789638e+02,1.952353522804791e+02,-9.810793612697997e+01,1.420230412136232e-02,2.421208492560056e+00,2.305379437524258e+00,2.048519321065642e+00,1.933525529175474e+00,7.689768184783397e-02],
[5.813271507025561e+01,-1.475424090878127e+02,1.301430656496395e+02,-3.961956740841543e+01,1.059577633314809e-02,1.700448564134711e+00,1.559038526017404e+00,1.415768274731469e+00,1.278418182054558e+00,5.655877984748055e-02],
[2.994740452423624e+01,-7.761012662552783e+01,9.988177646231442e+01,-5.121270055056731e+01,8.196189544460320e-03,1.302839878800107e+00,1.157941052583095e+00,1.009885493380251e+00,9.433279714332660e-01,4.331976113218256e-02],
[9.489848945035248e-01,-3.013339230435549e+01,5.279650781273386e+01,-2.270627037952724e+01,6.569976645314410e-03,1.458829331986459e+00,6.887799931876800e-01,6.542398693466957e-01,6.148361308119943e-01,3.428374194950112e-02],
[5.827411922209074e-01,3.706765618410549e-01,-5.467449673508092e-01,4.140526824802081e-01,5.199030808639931e-03,1.281185731438772e+00,4.445208971704776e-01,1.986508755104810e-01,1.854772466562765e-01,2.757383820338858e-02],
[2.367006039467926e+01,-2.185317861597425e+01,5.924994481089464e-01,-2.446522903102440e-02,4.839502217065358e-03,8.451487735146031e+00,8.040966004742982e+00,6.249960005263150e-01,1.324503949472964e-01,2.339943620498786e-02],
[4.855010476871495e+00,-2.662209064768437e+00,4.780012360851080e-01,-7.023070646920648e-02,3.989058281040198e-03,5.946392738424565e+00,4.171303125206979e+00,3.982698081503743e-01,1.618861858374742e-01,1.953450563631035e-02],
[2.834095616075075e+00,-4.280041333782610e+00,4.421916805483114e+00,-3.457744718964006e-02,3.523859414060799e-03,6.662350239805332e+00,5.512947222240214e-01,5.093289634459738e-01,1.117848374253312e-01,1.676023518052574e-02],
[2.871891426116124e+00,-2.061735011951735e+00,2.171140242044787e+00,-6.630736330588019e-02,3.010707096705137e-03,5.084871036429896e+00,4.291781853051262e-01,3.664854341921622e-01,1.197106112969034e-01,1.439945361283975e-02],
[2.791518400231514e+00,-4.365068378238221e+00,4.435584555166990e+00,-8.096357733994739e-02,2.679000179664404e-03,3.900659618654661e+00,3.298259683771500e-01,3.060899565058886e-01,1.080832325459728e-01,1.258944953311868e-02],
[2.679714156101995e+00,-4.742528222307552e-01,5.148359489896877e-01,-9.583600249907225e-02,2.488719638189352e-03,3.068891211999711e+00,3.782167021858090e-01,1.887218119025488e-01,9.233705900314941e-02,1.119208772411441e-02],
[2.566248399800203e+00,-3.388763508285917e-01,1.145845587555150e+00,-9.231093165470796e-01,2.291680020410422e-03,2.415949203656124e+00,4.214142393102160e-01,1.095924049758303e-01,9.909554582267530e-02,9.996659489275210e-03],
[2.459817464140685e+00,-3.641981770769951e-01,2.505844772224745e-01,-5.774370295443458e-02,2.301438668285837e-03,1.940046319888566e+00,3.992410678843988e-01,1.174724062744122e-01,5.678037260236218e-02,9.155798329207080e-03],
[5.811078786014548e+00,-5.025370965394226e+01,4.886094120598425e+01,7.406285920483829e-02,7.278027386262219e-04,1.266914833990368e+01,3.956410396981665e+00,3.683850595771545e+00,1.074585175695628e-01,6.655767893915011e-03],
[2.117811615241595e+01,-3.390438243174689e+02,3.227569585232967e+02,6.500776738969967e-02,6.558743665785935e-04,6.396086194317362e+00,3.740247138917495e+00,3.648884499226053e+00,9.450906345146735e-02,5.985206198837586e-03],
[1.260351865721486e+01,-2.768753820537026e+02,2.688716039073428e+02,5.568241788974580e-02,5.770712551453996e-04,6.156256153638529e+00,3.088735542666793e+00,3.027276632985483e+00,8.188747483752157e-02,5.382898320507976e-03],
[8.575957752381299e+00,-2.103315634653049e+02,2.060971726015414e+02,4.777739489772619e-02,5.057164844803206e-04,6.007806688755818e+00,2.602858567452130e+00,2.553523450511056e+00,7.114294840241539e-02,4.856284393837261e-03],
[6.527684332347890e+00,-2.004305768291727e+02,1.980150538899940e+02,4.139115180640056e-02,4.474550243298565e-04,5.835524793524481e+00,2.232559523811276e+00,2.197860185942290e+00,6.239738768285473e-02,4.403836490799580e-03],
[3.028317848436913e+00,-9.553939330814323e+01,9.617615623521981e+01,3.597773159579877e-02,3.914928907184223e-04,8.359115043146318e+00,1.802637902641032e+00,1.775094889570472e+00,5.481444121431137e-02,3.998289689160348e-03],
[4.374175506331227e+00,-1.609255109187795e+02,1.602733080603223e+02,3.123038610491624e-02,3.469660210209380e-04,5.510317055049282e+00,1.687982164024339e+00,1.666140477777024e+00,4.833703903212770e-02,3.647469600530682e-03],
[3.798100908368596e+00,-9.168935493816872e+01,9.144542521554298e+01,2.727543440276047e-02,3.033798543837710e-04,5.317126458994331e+00,1.497130948847481e+00,1.468092418044105e+00,4.272478501289549e-02,3.327918552318741e-03],
[3.330378744675443e+00,-7.700175964729671e+01,7.707252217905169e+01,2.399046690405699e-02,2.682566655239420e-04,5.181359645795432e+00,1.329151222651394e+00,1.302849289632289e+00,3.806454868263710e-02,3.050100079915708e-03],
[2.969080787252864e+00,-7.574770691290402e+01,7.603982876253073e+01,2.101621136929670e-02,2.311517511351530e-04,5.041809491093800e+00,1.182755079216293e+00,1.162165458466299e+00,3.374790878830353e-02,2.786808620707405e-03],
[1.752071452121456e+00,-4.304105234921245e+01,4.407059155435739e+01,1.868761540881447e-02,2.017273247916241e-04,6.187504979861871e+00,1.002662636289766e+00,9.853843113530303e-01,3.029847039161176e-02,2.558555987488791e-03],
[2.466371104994591e+00,-6.146785413325375e+01,6.201769452374813e+01,1.641601739314162e-02,1.724871175953809e-04,4.910280784938159e+00,9.678985203229922e-01,9.512838347753555e-01,2.696009676675663e-02,2.341096110462537e-03],
[2.760102031084283e+00,-3.444526142074679e+01,3.522622672440163e+01,1.320671969994199e-02,1.259455609282457e-04,6.101282245376627e+00,7.651433135534649e-01,7.513286233828597e-01,2.248796343172512e-02,2.067373742787123e-03],
[3.182416352600000e+00,-5.245140378111667e+01,5.296908271622185e+01,1.140961685918648e-02,9.509543581450579e-05,5.017190408609147e+00,7.123957644377982e-01,7.022801925281940e-01,1.967472956940154e-02,1.841466144940115e-03],
[3.456429691196040e+00,-3.331760444317212e+01,3.357121938553322e+01,9.790022956403421e-03,6.534348622651725e-05,4.013580160329452e+00,6.623557780506291e-01,6.457719410560738e-01,1.709193532310115e-02,1.603016028394201e-03],
[3.649050478019264e+00,-4.368516622212386e+01,4.369202886011548e+01,8.449022841991444e-03,3.786114741100382e-05,3.250432671125934e+00,6.096662016502890e-01,5.969713008021232e-01,1.485545127403623e-02,1.336255873565630e-03],
[3.838463122242895e+00,-5.227234710112339e+01,5.198612794956596e+01,7.339559893380448e-03,1.646942079513399e-05,2.611894705732323e+00,5.661950628747182e-01,5.552793266998739e-01,1.297464694324407e-02,1.029865368558757e-03],
[4.025410303108274e+00,-4.630423320789298e+01,4.572136819041012e+01,6.353379596253157e-03,1.334778452557430e-06,2.136483814437400e+00,5.265911664541312e-01,5.141367844645776e-01,1.128072422420068e-02,4.880898579409704e-04],
[3.389753515953940e+00,2.143483486791724e+00,3.543226035109782e-01,3.740093400856642e-03,3.003425023422297e-07,2.057448143681711e+01,1.910799452185164e+00,1.974105893966039e-01,8.134594653439889e-03,2.926857910569511e-04],
[4.770925092998260e+00,1.475978501552834e+00,3.044513555441887e-01,3.594749819167283e-03,3.000855492282790e-07,1.336688813304128e+01,1.337383795771967e+00,1.775323694377828e-01,7.791050330018268e-03,2.822551396485372e-04],
[4.607210198752340e+00,1.428018510398403e+00,2.955810455777538e-01,3.389978408528951e-03,2.668629749690224e-07,1.086869055571519e+01,1.311374558731241e+00,1.680228707847112e-01,7.359645453504783e-03,2.623432810213873e-04],
[4.311754534068716e+00,1.493315780393395e+00,2.812360501288841e-01,3.093377384557471e-03,2.580244485125306e-07,9.458965805174902e+00,1.330636228452456e+00,1.565068714444536e-01,6.824105238117352e-03,2.498188791107023e-04],
[3.111790391134954e+00,2.202590609458031e+00,2.703307749100209e-01,2.687991947510981e-03,2.325494833477792e-07,1.069031413430237e+01,1.653163561589331e+00,1.451151857189699e-01,6.139563515828505e-03,2.322402359376725e-04],
[2.831059684320536e+00,2.348581374896745e+00,2.451058884296964e-01,2.352821082185159e-03,2.312708383438592e-07,1.043571957589507e+01,1.604828686745972e+00,1.316969347746069e-01,5.549779013833459e-03,2.227474637648977e-04],
[2.571798593233526e+00,2.456337419572030e+00,2.206584408813715e-01,2.055314180124382e-03,2.321329477936922e-07,1.016431171313775e+01,1.534419192445505e+00,1.191386197541104e-01,5.018532408829888e-03,2.145903791208612e-04],
[2.332300303539466e+00,2.535780254890496e+00,1.982080421360260e-01,1.761201304600535e-03,1.981294115460245e-07,9.921674601599595e+00,1.455856688087881e+00,1.076821878733493e-01,4.472435456549673e-03,1.965747162324994e-04],
[2.113525348594700e+00,2.586363161550138e+00,1.770639138636865e-01,1.497370510030569e-03,2.054814455556224e-07,9.659137258597623e+00,1.371066569343296e+00,9.703530275846488e-02,3.971285090887921e-03,1.913551907377983e-04],
[6.421597961826873e-01,2.979148144263289e+00,1.681544260042708e-01,1.337442138784078e-03,1.914109682468616e-07,5.974797502634061e+00,1.433594325412777e+00,9.098684011726770e-02,3.624101371161622e-03,1.806889144160450e-04],
[1.553172166803896e+00,2.639303646999888e+00,1.420154869567882e-01,1.008504600997609e-03,1.946384299730244e-07,8.156202357589566e+00,1.216008874818015e+00,7.900988649158734e-02,2.965479013639490e-03,1.745930959191462e-04],
[6.153078519928602e+01,-7.860167412015821e+01,2.155012926027705e+01,1.376850156641916e-01,3.246449309465210e-04,3.114681025332473e+00,2.760169833885745e+00,1.935513123247224e+00,7.224683472602932e-02,1.170016296246845e-03],
[4.222321779015246e+00,-2.641213183532026e+01,2.728528527087469e+01,1.216179018841380e-01,3.068835463715258e-04,6.072655104032275e+00,1.645501789593879e+00,1.522570749395068e+00,6.565079146952256e-02,1.120938514730356e-03],
[5.142220746420537e+00,-2.549454137625767e+01,2.574144875486019e+01,1.117782275921996e-01,2.936473847377427e-04,5.272726364744845e+00,1.531949592091483e+00,1.402575250400872e+00,6.116853872630869e-02,1.075608153945223e-03],
[6.241640318318837e+00,-9.338687244195522e+01,9.263328758298843e+01,1.034126922212987e-01,2.818484268943907e-04,4.269841080826875e+00,1.394077461402502e+00,1.355668549104345e+00,5.726679496521998e-02,1.033079542820674e-03],
[7.377433018134030e+00,-1.260251069316281e+02,1.241284050040956e+02,9.599783718185698e-02,2.710722163988820e-04,3.469177577838978e+00,1.297598108867366e+00,1.267710676460660e+00,5.377717501794231e-02,9.930845770291768e-04],
[9.644006662721232e+00,-1.229244353501125e+02,1.186825648165673e+02,8.950259470255390e-02,2.612761214904750e-04,2.726455453665441e+00,1.237234258508660e+00,1.200620368722498e+00,5.066786822851999e-02,9.554378833834973e-04],
[1.554517496748606e+01,-1.182410278567446e+02,1.080095249631970e+02,8.362593419922217e-02,2.519918624290739e-04,2.106373408654927e+00,1.208603761295122e+00,1.153952705672140e+00,4.781893912748243e-02,9.198862575926131e-04],
[4.287087391816923e+00,3.232506654229650e+00,6.740295335617063e-01,6.189080833876976e-02,2.356120529521900e-04,2.265878707985415e+01,2.237973864700642e+00,3.689955686643163e-01,4.022665752984844e-02,8.837618908780351e-04],
[6.244751873904615e+00,2.351722714163885e+00,4.742793732222520e-01,6.381138742868499e-02,2.346512805627924e-04,1.514313541909856e+01,1.453790006048140e+00,3.208356463878018e-01,4.043545320946998e-02,8.540811312800327e-04],
[6.097881795995097e+00,2.194951647366750e+00,5.481727919600226e-01,6.166695732226626e-02,2.268073558647142e-04,1.242885443158548e+01,1.505359923520235e+00,3.337380397171243e-01,3.877445534999988e-02,8.240498840648670e-04],
[5.795268796472405e+00,2.370226641078433e+00,4.713987569011149e-01,5.743682605878668e-02,2.189794892596593e-04,1.428010550582560e+01,1.359690157191345e+00,3.020173496635141e-01,3.664367981470077e-02,7.954345265183711e-04],
[5.604062553775258e+00,2.357962595618129e+00,4.760010985728824e-01,5.441233743152471e-02,2.114146022051498e-04,1.395174902305747e+01,1.312397549174392e+00,2.949337011929565e-01,3.486015424623241e-02,7.682616826618097e-04],
[5.429083919697703e+00,2.336873253608803e+00,4.833735541048819e-01,5.146549645574790e-02,2.037761328637611e-04,1.365036494276600e+01,1.267598413903199e+00,2.886106815769299e-01,3.312918074466093e-02,7.423484838012663e-04],
[5.267744450894446e+00,2.308558133263050e+00,4.932654790260128e-01,4.863562797416966e-02,1.963088423206752e-04,1.336020968273946e+01,1.225858565869417e+00,2.829196321278669e-01,3.147353971271379e-02,7.176580250696152e-04],
[5.126804285170776e+00,2.269255340083806e+00,5.042093004533025e-01,4.569239924162220e-02,1.886750504938862e-04,1.315815010261290e+01,1.181295082433371e+00,2.771070382190629e-01,2.979576045495446e-02,6.940110991990983e-04],
[4.979623597498092e+00,2.241830874556695e+00,5.129339614028937e-01,4.298018484983344e-02,1.813816924857876e-04,1.283926630780338e+01,1.147054464204860e+00,2.703871609352437e-01,2.824187149526020e-02,6.714866031739924e-04],
[5.078358300456114e+00,1.957440271816590e+00,5.928259832213751e-01,4.195020341439256e-02,1.752410915283168e-04,1.051327254690473e+01,1.117649412815246e+00,2.843867418336752e-01,2.726633276413471e-02,6.503108607073037e-04],
[4.711616366573001e+00,2.172619507865789e+00,5.397176013428657e-01,3.797960045478111e-02,1.669237635648417e-04,1.231094159485391e+01,1.087437967674925e+00,2.598049655092755e-01,2.532899238951897e-02,6.292785669619112e-04],
[4.590755044851466e+00,2.135723730365674e+00,5.513555600941525e-01,3.560584067185138e-02,1.598240168567898e-04,1.206567406233699e+01,1.058117371158644e+00,2.539944389186618e-01,2.395087396496492e-02,6.094827484332881e-04],
[4.484001106267108e+00,2.089043470785398e+00,5.659326183161046e-01,3.327035902110630e-02,1.524456102828921e-04,1.187492506915706e+01,1.028284937087896e+00,2.489078079080760e-01,2.258440655321478e-02,5.903744451594245e-04],
[4.376651407869632e+00,2.046451503836341e+00,5.806628605915877e-01,3.123885283277667e-02,1.453748696625357e-04,1.166530807171395e+01,1.003147696754953e+00,2.441532926863124e-01,2.136185800007310e-02,5.721103384547666e-04],
[4.283083182474195e+00,1.995380014537307e+00,5.970535713325043e-01,2.909516688695599e-02,1.380647690375216e-04,1.149619059566834e+01,9.770391020188206e-01,2.394291329758291e-01,2.009122333272558e-02,5.543771384922663e-04],
[4.195638407371233e+00,1.943332859786456e+00,6.124466172854658e-01,2.715152076949324e-02,1.305947873519297e-04,1.141077504566523e+01,9.490119244548774e-01,2.349503265353047e-01,1.890515762809755e-02,5.372336492097111e-04],
[4.356925932963843e+00,1.695892047773159e+00,6.639045200684705e-01,2.630200187602814e-02,1.254973184998238e-04,9.294345147185689e+00,9.105000459574200e-01,2.387465959113764e-01,1.820985425464623e-02,5.215593719635622e-04],
[4.331384056649235e+00,1.527648647286807e+00,7.357959228912380e-01,2.495263232014026e-02,1.187408525810578e-04,7.876844338102884e+00,9.425156426277488e-01,2.416994800398060e-01,1.728998944485090e-02,5.058346313135256e-04],
[4.197260013196420e+00,1.468548067747088e+00,7.839312482110882e-01,2.324940948643951e-02,1.112613586072860e-04,6.936740248944572e+00,1.017252766183483e+00,2.389489397150706e-01,1.623324330753810e-02,4.902390040211490e-04],
[3.976297158190774e+00,1.522926842573418e+00,7.977062463905613e-01,2.136667415586852e-02,1.030786893857173e-04,6.296857792287749e+00,1.112899511576911e+00,2.310570406784734e-01,1.510135455672045e-02,4.746824771050258e-04],
[3.751443814398119e+00,1.627688029776327e+00,7.817567554542718e-01,1.951708039122916e-02,9.431998042934275e-05,5.797546360829538e+00,1.182236310777107e+00,2.199135860247702e-01,1.398104554814566e-02,4.591271258298386e-04],
[3.484015173387116e+00,1.793779204169655e+00,7.448783566919203e-01,1.754277851624345e-02,8.448723515688600e-05,5.439988460809537e+00,1.227921341401281e+00,2.062088569929092e-01,1.278994017211460e-02,4.430322267874786e-04],
[1.599565781988442e+00,2.975344521941205e+00,6.950926783668822e-01,1.487796274586880e-02,6.905495791015833e-05,5.792444473855675e+00,1.553009829732260e+00,1.886263359366482e-01,1.117634706624533e-02,4.227723616555514e-04],
[2.040215639757283e+00,2.899226346248255e+00,6.363440838157977e-01,1.320719195954083e-02,5.673821925001312e-05,6.658194296096275e+00,1.413379237789324e+00,1.740001045021790e-01,1.006878045302105e-02,4.030771056922231e-04],
[1.675934670648708e+00,3.004866029697293e+00,5.953400131616355e-01,1.171631866230948e-02,4.296782976398171e-05,5.522310932114025e+00,1.380072230071963e+00,1.622292376559454e-01,9.018148904165756e-03,3.792776674776671e-04],
[2.235228504431053e+00,2.682766386519949e+00,5.551949262124333e-01,1.072733543662587e-02,3.284739920462629e-05,5.020309889602403e+00,1.230775905837777e+00,1.522481229928636e-01,8.283991169062104e-03,3.562419389317589e-04],
[2.803427374125100e+00,2.718827879660200e+00,5.224759153919996e-01,9.845378369710420e-03,2.345245265083162e-05,6.558768728045342e+00,1.169724225166679e+00,1.435566918001781e-01,7.619765262300398e-03,3.296276739029854e-04],
[3.608610209977714e+00,2.450567747371983e+00,4.786395001072570e-01,8.872142351692152e-03,1.040019329094673e-05,6.581625946219628e+00,1.027728526605885e+00,1.335336806347209e-01,6.848612389484298e-03,2.763888754566660e-04],
[4.242099010573159e+00,2.099943420558279e+00,4.328366313799229e-01,8.020215703810592e-03,7.217850308513403e-07,5.752801155360800e+00,8.739014891954615e-01,1.235999561805247e-01,6.176003330585702e-03,1.414951776172309e-04],
[4.636200956689623e+00,1.780633114269871e+00,4.037304439527385e-01,7.685395546686740e-03,8.954159028076436e-08,4.888252997809829e+00,7.563105268800747e-01,1.173023644522492e-01,5.930343942428942e-03,7.666686638730287e-05],
[4.965922505950705e+00,1.438155615070337e+00,3.712992005792981e-01,7.472564284502011e-03,1.141152841525851e-07,4.091293787874963e+00,6.292289966025513e-01,1.110966786955352e-01,5.772350103477618e-03,8.085118938793825e-05],
[5.306156144750332e+00,1.117331602360721e+00,3.158587231108543e-01,7.203422423102100e-03,1.073553305458635e-07,3.488007354816557e+00,4.811907411497712e-01,1.018744679457531e-01,5.592453744170787e-03,7.795066735407367e-05],
[4.520533990423360e+00,4.106953979091246e+00,7.139468785037285e-01,1.692940276874539e-02,8.574921291917244e-05,1.944822342329488e+01,1.898246731559969e+00,1.695535635953418e-01,1.148195675489342e-02,3.461220382579827e-04],
[6.524010720018733e+00,3.207870807456613e+00,5.404787743496377e-01,8.782788068988532e-03,6.910106029491315e-06,1.400925542989749e+01,1.326350359616653e+00,1.314085683860361e-01,6.286474345204096e-03,2.278399814589510e-04],
[6.896028535596191e+00,2.835141545365232e+00,5.035068818888151e-01,8.022945109667069e-03,9.204009547587397e-08,1.107638256703987e+01,1.171326162905030e+00,1.234946513917999e-01,5.735155957904971e-03,7.197075418025232e-05],
[7.093749001626302e+00,2.529123739031940e+00,4.821078198888890e-01,7.719366741451110e-03,7.271141994250414e-08,9.094737951659447e+00,1.063916670331612e+00,1.186194466218779e-01,5.539457088950347e-03,6.584947305284627e-05],
[6.434013247972842e+00,2.970999705357888e+00,4.607966517878480e-01,7.240331257754553e-03,6.362366643091279e-08,1.025968513072979e+01,1.131774523061633e+00,1.127759353623823e-01,5.274595833531321e-03,6.192638240887597e-05],
[6.210708267840199e+00,3.039344538256235e+00,4.373399844391628e-01,6.807147641473166e-03,6.182293277428513e-08,1.002141058591628e+01,1.103998801558834e+00,1.072189731624539e-01,5.024321308506824e-03,6.005069941971958e-05],
[6.004315983089865e+00,3.094316545314180e+00,4.128084877164170e-01,6.408916578800669e-03,6.730073762160754e-08,9.817930467191061e+00,1.069787050680294e+00,1.016352914486458e-01,4.795248468887250e-03,6.028065987264629e-05],
[5.200617168103042e+00,3.498494403671440e+00,4.054149311313203e-01,6.223437008265299e-03,6.008593295434409e-08,1.120383101944067e+01,1.128463695469282e+00,9.893334726861316e-02,4.659174319779507e-03,5.725906389623341e-05],
[5.025338600360291e+00,3.518439882851541e+00,3.819503494462722e-01,5.821102080962110e-03,6.526093388297119e-08,1.097721906976287e+01,1.084772148326308e+00,9.367468748538359e-02,4.426823468734856e-03,5.738568370505115e-05],
[5.346561002606197e+00,3.224684665609108e+00,3.494617526254452e-01,5.292517567488151e-03,6.159176302362374e-08,9.231183797524494e+00,9.728362291938352e-01,8.705962209665623e-02,4.130119644650323e-03,5.494638944496757e-05],
[5.225823503340047e+00,3.228188739952953e+00,3.270988788238514e-01,4.888825755922390e-03,5.212722694193633e-08,9.071357066187183e+00,9.311242774566348e-01,8.207206020598455e-02,3.890296559934166e-03,5.103679766366416e-05],
[4.586412477535479e+00,3.518695956651012e+00,3.192617142012054e-01,4.729796479856258e-03,5.513244808062041e-08,1.031861020923352e+01,9.572788378292328e-01,7.968074314438807e-02,3.771931999968489e-03,5.097508603760111e-05],
[4.457994806754126e+00,3.508672126376623e+00,3.013753805283154e-01,4.407637462144819e-03,4.887879032285916e-08,1.008906933834013e+01,9.194464473616226e-01,7.564191777863293e-02,3.570264651248093e-03,4.804951743958113e-05],
[4.338975764011709e+00,3.491850988964034e+00,2.814710990162868e-01,4.002092714990461e-03,5.529298081955140e-08,9.963309372238362e+00,8.780839569829744e-01,7.116371157687776e-02,3.321524042150777e-03,4.851031794603728e-05],
[4.227294704031012e+00,3.472492275106616e+00,2.648222294968986e-01,3.690728778331929e-03,6.258714262002473e-08,9.724006020400314e+00,8.428737759602104e-01,6.735347439748511e-02,3.123646062633208e-03,4.912170970176192e-05],
[4.109517024430204e+00,3.457991325227507e+00,2.470873512223867e-01,3.304239209409952e-03,5.991049262319316e-08,9.677359945101202e+00,8.069400424708172e-01,6.328154369541671e-02,2.875446396412092e-03,4.706791536975981e-05]],
dtype=torch.float64)
# fmt: on


@torch.jit.script
def eval_LVD_fit(
    z_vals: Tensor,  # atomic numbers
    s_vals: Tensor,  # s = g/4π in Å⁻¹
    fit_LVD: Tensor = fit_LVD,
) -> Tensor:
    """
    Compute the real scattering factors from Labato and Van Dyke.

    Parameters
    :z_vals: Tensor of atomic numbers shaped (...)
    :s_vals: Tensor of values of s = g/4π in Å⁻¹ shaped (...)
    :labato_fit: Labato et al. fit parameters

    Returns
        Real part of the high energy TDS scattering factor.
    """
    # Move parameters to correct device and dtype
    fit_LVD = fit_LVD.to(z_vals.device).to(s_vals.dtype)

    # Get parameters for atomic numbers [*z_shape, 10]
    fit = fit_LVD[z_vals - 1]

    # Calculate g value
    g = 2.0 * s_vals  # [*s_shape, 1]

    # Split fit parameters into a and b groups
    a_params = fit[..., :5]  # First 5 parameters [1, 1, 1, 1, 5]
    b_params = fit[..., 5:]  # Last 5 parameters  [1, 1, 1, 1, 5]

    # Compute terms for each a,b pair
    g_squared = g[..., None] ** 2  # [N_z, N_g, gridX, gridY, 1]
    numerator = 2.0 + b_params * g_squared
    denominator = (1.0 + b_params * g_squared) ** 2

    # Combine all terms
    f = torch.sum(a_params * numerator / denominator, dim=-1)

    return f


@torch.jit.script
def evaluate_polynomial(coeffs: List[float], x: Tensor) -> Tensor:
    """Evaluate polynomial using Horner's method"""
    result = torch.full_like(x, coeffs[-1])
    for i in range(len(coeffs) - 2, -1, -1):
        result = (result * x) + coeffs[i]
    return result


@torch.jit.script
def exp1(x: Tensor) -> Tensor:
    """
    Compute the exponential integral E1(x) for real x.
    This is a PyTorch port of the rational approximation implementation.

    """
    # don't fill tensor to save allocation overhead
    result = torch.empty_like(x)

    # Handle special cases
    result = torch.where(x == 0, torch.tensor(float("inf")), result)
    result = torch.where(x < 0, torch.tensor(float("nan")), result)

    mask_range1 = (x > 0) & (x <= 1)
    if mask_range1.any():
        Y = 0.66373538970947265625
        P = [
            0.0865197248079397976498,
            0.0320913665303559189999,
            -0.245088216639761496153,
            -0.0368031736257943745142,
            -0.00399167106081113256961,
            -0.000111507792921197858394,
        ]
        Q = [
            1.0,
            0.37091387659397013215,
            0.056770677104207528384,
            0.00427347600017103698101,
            0.000131049900798434683324,
            -0.528611029520217142048e-6,
        ]

        x_masked1 = x[mask_range1]
        range1_result = evaluate_polynomial(P, x_masked1) / evaluate_polynomial(
            Q, x_masked1
        )
        range1_result = range1_result + x_masked1 - torch.log(x_masked1) - Y
        result[mask_range1] = range1_result

    mask_range2 = x > 1
    if mask_range2.any():
        P = [
            -0.121013190657725568138e-18,
            -0.999999999999998811143,
            -43.3058660811817946037,
            -724.581482791462469795,
            -6046.8250112711035463,
            -27182.6254466733970467,
            -66598.2652345418633509,
            -86273.1567711649528784,
            -54844.4587226402067411,
            -14751.4895786128450662,
            -1185.45720315201027667,
        ]
        Q = [
            1.0,
            45.3058660811801465927,
            809.193214954550328455,
            7417.37624454689546708,
            38129.5594484818471461,
            113057.05869159631492,
            192104.047790227984431,
            180329.498380501819718,
            86722.3403467334749201,
            18455.4124737722049515,
            1229.20784182403048905,
            -0.776491285282330997549,
        ]

        x_masked2 = x[mask_range2]
        recip = 1 / x_masked2
        range2_result = 1 + evaluate_polynomial(P, recip) / evaluate_polynomial(
            Q, recip
        )
        range2_result = range2_result * torch.exp(-x_masked2) * recip
        result[mask_range2] = range2_result

    return result


@torch.jit.script
def expi(x: Tensor) -> Tensor:
    """
    Compute the exponential integral Ei(x) for real x.
    PyTorch implementation with TorchScript support.
    """
    result = torch.zeros_like(x)

    # Handle special cases
    result = torch.where(x == 0, torch.tensor(float("-inf")), result)
    neg_mask = x < 0
    if neg_mask.any():
        result[neg_mask] = -exp1(-x[neg_mask])

    # Constants for different ranges
    mask_range1 = (x > 0) & (x <= 6)
    if mask_range1.any():
        Y = 0.66373538970947265625
        P = [
            2.98677224343598593013,
            0.356343618769377415068,
            0.780836076283730801839,
            0.114670926327032002811,
            0.0499434773576515260534,
            0.00726224593341228159561,
            0.00115478237227804306827,
            0.000116419523609765200999,
            0.798296365679269702435e-5,
            0.2777056254402008721e-6,
        ]
        Q = [
            1.0,
            -1.17090412365413911947,
            0.62215109846016746276,
            -0.195114782069495403315,
            0.0391523431392967238166,
            -0.00504800158663705747345,
            0.000389034007436065401822,
            -0.138972589601781706598e-4,
        ]

        r = 0.372507410781366634461991866580119133535689497771654051555657435242200120636201854384926049951548942392
        x_masked1 = x[mask_range1]
        t = (x_masked1 / 3) - 1
        range1_result = evaluate_polynomial(P, t) / evaluate_polynomial(Q, t)
        t = x_masked1 - r
        range1_result = range1_result * t

        # Use torch.where for the conditional logic
        small_t_mask = torch.abs(t) < 0.1
        range1_result = torch.where(
            small_t_mask,
            range1_result + torch.log1p(t / r),
            range1_result + torch.log(x_masked1 / r),
        )
        result[mask_range1] = range1_result

    mask_range2 = (x > 6) & (x <= 10)
    if mask_range2.any():
        Y = 1.158985137939453125
        P = [
            0.00139324086199402804173,
            -0.0349921221823888744966,
            -0.0264095520754134848538,
            -0.00761224003005476438412,
            -0.00247496209592143627977,
            -0.000374885917942100256775,
            -0.554086272024881826253e-4,
            -0.396487648924804510056e-5,
        ]
        Q = [
            1.0,
            0.744625566823272107711,
            0.329061095011767059236,
            0.100128624977313872323,
            0.0223851099128506347278,
            0.00365334190742316650106,
            0.000402453408512476836472,
            0.263649630720255691787e-4,
        ]

        x_masked2 = x[mask_range2]
        t = x_masked2 / 2 - 4
        range2_result = Y + evaluate_polynomial(P, t) / evaluate_polynomial(Q, t)
        range2_result = range2_result * torch.exp(x_masked2) / x_masked2
        range2_result = range2_result + x_masked2
        result[mask_range2] = range2_result

    mask_range3 = (x > 10) & (x <= 20)
    if mask_range3.any():
        Y = 1.086973190307617188
        P = [
            -0.00893891094356945667451,
            -0.0484607730127134045806,
            -0.0652810444222236895772,
            -0.0478447572647309671455,
            -0.0226059218923777094596,
            -0.00720603636917482065907,
            -0.00155941947035972031334,
            -0.000209750022660200888349,
            -0.138652200349182596186e-4,
        ]
        Q = [
            1.0,
            1.97017214039061194971,
            1.86232465043073157508,
            1.09601437090337519977,
            0.438873285773088870812,
            0.122537731979686102756,
            0.0233458478275769288159,
            0.00278170769163303669021,
            0.000159150281166108755531,
        ]

        x_masked3 = x[mask_range3]
        t = x_masked3 / 5 - 3
        range3_result = Y + evaluate_polynomial(P, t) / evaluate_polynomial(Q, t)
        range3_result = range3_result * torch.exp(x_masked3) / x_masked3
        range3_result = range3_result + x_masked3
        result[mask_range3] = range3_result

    # z > 20
    mask_range4 = x > 20
    if mask_range4.any():
        Y = 1.013065338134765625
        P = [
            -0.0130653381347656243849,
            0.19029710559486576682,
            94.7365094537197236011,
            -2516.35323679844256203,
            18932.0850014925993025,
            -38703.1431362056714134,
        ]
        Q = [
            1.0,
            61.9733592849439884145,
            -2354.56211323420194283,
            22329.1459489893079041,
            -70126.245140396567133,
            54738.2833147775537106,
            8297.16296356518409347,
        ]

        x_masked4 = x[mask_range4]
        t = 1.0 / x_masked4
        range4_result = Y + evaluate_polynomial(P, t) / evaluate_polynomial(Q, t)
        range4_result *= torch.exp(x_masked4) / x_masked4
        range4_result += x_masked4
        result[mask_range4] = range4_result

    return result


@torch.jit.script
def RIH2_torch(X: Tensor) -> Tensor:
    # Define constants
    rih2_table = torch.tensor(
        [
            1.000000,
            1.005051,
            1.010206,
            1.015472,
            1.020852,
            1.026355,
            1.031985,
            1.037751,
            1.043662,
            1.049726,
            1.055956,
            1.062364,
            1.068965,
            1.075780,
            1.082830,
            1.090140,
            1.097737,
            1.105647,
            1.113894,
            1.122497,
            1.131470,
        ],
        dtype=X.dtype,
        device=X.device,
    )
    rih2_table = rih2_table.to(X.device).to(X.dtype)
    idx = (200.0 / X).floor().long()
    idx = torch.clamp(idx, 0, len(rih2_table) - 2)
    sig = rih2_table[idx] + 200.0 * (rih2_table[idx + 1] - rih2_table[idx]) * (
        1.0 / X - 0.5e-3 * idx
    )
    return sig


@torch.jit.script
def RIH1_torch_where(X1: Tensor, X2: Tensor, X3: Tensor) -> Tensor:
    """
    Compute RIH1 for tensors of any shape, with broadcasting.
    Use where() to handle different cases.
    """
    # Case 1: X2 <= 20.0 and X3 <= 20.0
    mask1 = (X2 <= 20.0) & (X3 <= 20.0)
    mask2 = (X2 > 20.0) & (X3 <= 20.0)
    mask3 = (X2 <= 20.0) & (X3 > 20.0)

    return torch.where(
        mask1,
        torch.exp(-X1) * (expi(X2) - expi(X3)),
        torch.where(
            mask2,
            torch.exp(X2 - X1) * RIH2_torch(X2) / X2 - torch.exp(-X1) * expi(X3),
            torch.where(
                mask3,
                torch.exp(-X1) * expi(X2) - torch.exp(X3 - X1) * RIH2_torch(X3) / X3,
                torch.exp(X2 - X1) * RIH2_torch(X2) / X2
                - torch.exp(X3 - X1) * RIH2_torch(X3) / X3,
            ),
        ),
    )


@torch.jit.script
def e_wavelength_eV_to_A(E_eV: Tensor) -> Tensor:
    """
    Calculate electron wavelength in Angstroms using PyTorch, performed in log
    space to prevent any numerical issues.

    """
    # log(λ) = log(h) - 0.5 * log(2me*E_eV) - 0.5 * log(1 + eE/2mc^2) + log(1e10)
    # log(λ) = log(h) - 0.5 * log(2me) + log(1e10) - 0.5 * log(E_eV) - 0.5 * log(1 + e*E_eV/2mc^2)
    # log(λ) = 2.5066892156586356 - 0.5 * log(E_eV) - 0.5 * log(1 + exp(log(E_eV) - 13.83726968949393))
    log_wavelength = (
        2.5066892156586356
        - 0.5 * torch.log(E_eV)
        - 0.5 * torch.log1p(E_eV * 9.7847589066012e-07)
    )
    wavelength = torch.exp(log_wavelength)
    return wavelength


def scatter_factor_hybrid(
    g: Tensor,  # [N_g]
    Z: Union[int, Tensor],  # [N_Z]
    thermal_sigma: Union[float, Tensor],  # [N_Z]
    voltage_kV: Union[float, Tensor],  # [N_V]
    wk_A_param: Tensor = wk_A_param,  # [98, 4]
    wk_B_param: Tensor = wk_B_param,  # [98, 4]
    fit_LVD: Tensor = fit_LVD,  # [98, 10]
    include_core: bool = True,
    include_phonon: bool = True,
    return_type: str = "EMsoft",  # "EMsoft" or "ITC"
) -> Tensor:
    """
    Compute the complex valued atomic scattering factors for electron
    scattering. Use Weickenmeier-Kohl fit for the analytic evaluation of the
    imaginary portion due to TDS and Labato and Van Dyck for the real portion.

    Args:
        :g:
            Tensor of scattering magnitudes (1/Å) shape [N_g]
        :Z:
            Atomic number(s) (1-98) shape [N_Z] or scalar
        :thermal_sigma:
            RMS displacement for each atom shape [N_Z] or scalar
        :accelerating_voltage:
            Voltage values in eV shape [N_V] or scalar
        :wk_A_param:
            A parameters shape [98, 4]
        :wk_B_param:
            B parameters shape [98, 4]
        :fit_LVD:
            Labato and Van Dyke fit parameters shape [98, 10]
        :include_core:
            Include core loss contribution
        :include_phonon:
            Include phonon/TDS contribution
        :return_type:
            "Convention" for the scatter factors (EMsoft or International Tables
            of Crystallography). ITC is available to match against tabulated
            values here:
            (https://onlinelibrary.wiley.com/iucr/itc/Cb/ch4o3v0001/ch4o3.pdf)

            Default is "EMsoft". ITC is always real valued.

    Returns:
        Tensor of shape [N_V, N_Z, N_g]: complex with "EMsoft" convention or
        real with "ITC" convention. ITC only used for verifying implementation.
    """
    # Convert scalar inputs to tensors and ensure 1D
    if isinstance(voltage_kV, (int, float)):
        voltage_kV = torch.tensor([voltage_kV], device=g.device, dtype=g.dtype)
    if isinstance(Z, (int, float)):
        Z = torch.tensor([Z], device=g.device, dtype=torch.int64)
    if isinstance(thermal_sigma, (int, float)):
        thermal_sigma = torch.tensor([thermal_sigma], device=g.device, dtype=g.dtype)

    # if any tensors were more than 1D, raise an error
    if len(g.shape) > 1 or len(Z.shape) > 1 or len(thermal_sigma.shape) > 1:
        raise ValueError(
            f"Input tensors must be scalars or 1D tensors, "
            + "got shapes g: {g.shape}, Z: {Z.shape}, thermal_sigma: {thermal_sigma.shape}"
        )

    # if using ITC convention, set phonon and core to False and let the user know
    if return_type == "ITC":
        include_core = False
        include_phonon = False
        # print(
        #     "return_type='ITC' for real-valued WK factors lacks core / phonon contributions.\n"
        #     + "This is used for comparison against tabulated values of f (Å)\n"
        #     + "for absorptive electron scattering factors set return_type='EMsoft'",
        # )

    # Ensure inputs are 1D
    g = g.view(-1)  # [N_g]
    Z = Z.view(-1)  # [N_Z]
    thermal_sigma = thermal_sigma.view(-1)  # [N_Z]
    voltage_kV = voltage_kV.view(-1)  # [N_V]

    # Get dimensions
    N_V = len(voltage_kV)
    N_Z = len(Z)
    N_g = len(g)

    # Prepare g-vector calculations
    G = g.view(1, 1, -1) * 2.0 * torch.pi  # [1, 1, N_g]
    S = g.view(1, 1, -1) / 2.0  # [1, 1, N_g]

    f_real = eval_LVD_fit(
        Z.view(N_Z, 1),
        S.view(1, N_g),
        fit_LVD,
    )[
        None, :, :
    ]  # [1, N_Z, N_g]

    # Ensure wk params on right device/dtype
    wk_A_param = wk_A_param.to(G.device).to(G.dtype)
    wk_B_param = wk_B_param.to(G.device).to(G.dtype)

    # Get parameters for atomic numbers
    A = wk_A_param[Z - 1]  # [N_Z, 4]
    B = wk_B_param[Z - 1]  # [N_Z, 4]

    # Calculate thermal factors
    dwf = torch.exp(-0.5 * thermal_sigma.view(-1, 1) ** 2 * G.view(1, -1) ** 2).view(
        1, N_Z, N_g
    )  # [N_Z, N_g]

    # Calculate wavelength for each voltage
    k0 = 2.0 * torch.pi / e_wavelength_eV_to_A(1000.0 * voltage_kV)  # [N_V]

    # Reshape for broadcasting
    k0 = k0.view(-1, 1, 1)  # [N_V, 1, 1]
    voltage_kV = voltage_kV.view(N_V, 1, 1)  # [N_V, 1, 1]

    # Core contribution
    if include_core:
        Z_float = Z.float().view(1, -1, 1)  # [1, N_Z, 1]
        DE = 6.0e-3 * Z_float
        theta_e = (
            DE
            / (2.0 * voltage_kV)
            * (2.0 * voltage_kV + 1022.0)
            / (voltage_kV + 1022.0)
        )  # [N_V, N_Z, 1]

        R = 0.885 * 0.5289 / torch.pow(Z_float, 1.0 / 3.0)  # [1, N_Z, 1]
        TA = 1.0 / (k0 * R)  # [N_V, N_Z, 1]
        TB = G / (2.0 * k0)  # [N_V, 1, N_g]

        OMEGA = 2.0 * TB / TA  # [N_V, N_Z, N_g]
        KAPPA = theta_e / TA  # [N_V, N_Z, 1]

        K2 = KAPPA * KAPPA
        O2 = OMEGA * OMEGA

        X1 = (
            OMEGA
            / ((1.0 + O2) * torch.sqrt(O2 + 4.0 * K2))
            * torch.log((OMEGA + torch.sqrt(O2 + 4.0 * K2)) / (2.0 * KAPPA))
        )

        X2 = (
            1.0
            / torch.sqrt((1.0 + O2) * (1.0 + O2) + 4.0 * K2 * O2)
            * torch.log(
                (
                    1.0
                    + 2.0 * K2
                    + O2
                    + torch.sqrt((1.0 + O2) * (1.0 + O2) + 4.0 * K2 * O2)
                )
                / (2.0 * KAPPA * torch.sqrt(1.0 + K2))
            )
        )

        X3 = torch.where(
            OMEGA > 1e-2,
            1.0
            / (OMEGA * torch.sqrt(O2 + 4.0 * (1.0 + K2)))
            * torch.log(
                (OMEGA + torch.sqrt(O2 + 4.0 * (1.0 + K2)))
                / (2.0 * torch.sqrt(1.0 + K2))
            ),
            1.0 / (4.0 * (1.0 + K2)),
        )

        HI = 2.0 * Z_float / (TA * TA) * (-X1 + X2 - X3)
        A0 = 0.5289
        Fcore = 4.0 / (A0 * A0) * 2.0 * torch.pi / (k0 * k0) * HI
    else:
        Fcore = 0.0

    if include_phonon:
        # Get indices for the 10 pairs we actually need
        i_idx, j_idx = torch.triu_indices(4, 4, offset=0, device=g.device)
        # Get only the parameter pairs we need
        A_i = A[:, i_idx].view(-1, 1, 10) * (4.0 * torch.pi) ** 2  # [N_Z, 1, 10]
        A_j = A[:, j_idx].view(-1, 1, 10) * (4.0 * torch.pi) ** 2  # [N_Z, 1, 10]
        B_i = B[:, i_idx].view(-1, 1, 10) / (4.0 * torch.pi) ** 2  # [N_Z, 1, 10]
        B_j = B[:, j_idx].view(-1, 1, 10) / (4.0 * torch.pi) ** 2  # [N_Z, 1, 10]

        # Calculate thermal factor
        M = 0.5 * thermal_sigma.view(-1, 1, 1) ** 2  # [N_Z, 1, 1]
        G2 = G.view(1, -1, 1) ** 2  # [1, N_g, 1]
        exp_DW = torch.exp(-M * G2)  # [N_Z, N_g, 1]

        # Handle g=0 case
        g_zero = g == 0

        if g_zero.any():
            # I¹ᵢⱼ(0) from eq 18
            I1_0 = torch.pi * (
                B_i * torch.log((B_i + B_j) / B_i) + B_j * torch.log((B_i + B_j) / B_j)
            )

            # I²ᵢⱼ(M,0) from eq 19
            I2_0 = torch.pi * (
                (B_i + 2 * M) * torch.log((B_i + B_j + 2 * M) / (B_i + 2 * M))
                + B_j * torch.log((B_i + B_j + 2 * M) / (B_j + 2 * M))
                + 2 * M * torch.log(2 * M / (B_j + 2 * M))
            )

        # Handle g≠0 case
        g_nonzero = ~g_zero
        if g_nonzero.any():
            # I¹ᵢⱼ(g) from eq 20
            G2_NZ = G2[:, g_nonzero]  # [1, N_g (nonzero), 1]
            pi_by_g2 = torch.pi / G2_NZ
            BiBj_term = -B_i * B_j * G2_NZ / (B_i + B_j)
            Bi2_term = B_i * B_i * G2_NZ / (B_i + B_j)
            Bj2_term = B_j * B_j * G2_NZ / (B_i + B_j)

            I1_g = pi_by_g2 * (
                2 * 0.57721566490153286060651209008240243  # 2C (Euler constant)
                + torch.log(B_i * G2_NZ)
                + torch.log(B_j * G2_NZ)
                - 2.0 * expi(BiBj_term)
                # # This is not numerically stable, so we use RIH1_torch_where
                # + torch.exp(-B_i * G2_NZ) * (expi(Bi2_term) - expi(B_i * G2_NZ))
                # + torch.exp(-B_j * G2_NZ) * (expi(Bj2_term) - expi(B_j * G2_NZ))
                + RIH1_torch_where(B_i * G2_NZ, Bi2_term, B_i * G2_NZ)
                + RIH1_torch_where(B_j * G2_NZ, Bj2_term, B_j * G2_NZ)
            )

            # I²ᵢⱼ(M,g) from eq 21
            BiM = B_i + M
            BjM = B_j + M
            BijM = B_i + B_j + 2 * M

            I2_g = pi_by_g2 * (
                2.0 * expi(-M * BiM * G2_NZ / (B_i + 2 * M))
                + 2.0 * expi(-M * BjM * G2_NZ / (B_j + 2 * M))
                - 2.0 * expi(-BiM * BjM * G2_NZ / BijM)
                - 2.0 * expi(-0.5 * M * G2_NZ)
                # # This is not numerically stable, so we use RIH1_torch_where
                # + torch.exp(-M * G2_NZ)
                # * (
                #     2.0 * expi(0.5 * M * G2_NZ)
                #     - expi(M * M * G2_NZ / (B_i + 2 * M))
                #     - expi(M * M * G2_NZ / (B_j + 2 * M))
                # )
                # + torch.exp(-BiM * G2_NZ)
                # * (
                #     expi(BiM * BiM * G2_NZ / BijM)
                #     - expi(BiM * BiM * G2_NZ / (B_i + 2 * M))
                # )
                # + torch.exp(-BjM * G2_NZ)
                # * (
                #     expi(BjM * BjM * G2_NZ / BijM)
                #     - expi(BjM * BjM * G2_NZ / (B_j + 2 * M))
                # )
                + RIH1_torch_where(
                    M * G2_NZ, 0.5 * M * G2_NZ, M * M * G2_NZ / (B_i + 2 * M)
                )
                + RIH1_torch_where(
                    M * G2_NZ, 0.5 * M * G2_NZ, M * M * G2_NZ / (B_j + 2 * M)
                )
                + RIH1_torch_where(
                    BiM * G2_NZ,
                    BiM * BiM * G2_NZ / BijM,
                    BiM * BiM * G2_NZ / (B_i + 2 * M),
                )
                + RIH1_torch_where(
                    BjM * G2_NZ,
                    BjM * BjM * G2_NZ / BijM,
                    BjM * BjM * G2_NZ / (B_j + 2 * M),
                )
            )

        # Combine according to eq 15
        # Create multiplier for i≠j terms (2.0 where i≠j, 1.0 where i=j)
        multiplier = torch.where(i_idx == j_idx, 1.0, 2.0).view(1, 1, -1)

        # Apply A coefficients and thermal factor
        result = torch.zeros(N_Z, N_g, 10, dtype=g.dtype, device=g.device)
        if g_zero.any():
            result[:, g_zero, :] = (
                multiplier * A_i * A_j * (exp_DW[:, g_zero, :] * I1_0 - I2_0)
            )
        if g_nonzero.any():
            result[:, g_nonzero, :] = (
                multiplier * A_i * A_j * (exp_DW[:, g_nonzero, :] * I1_g - I2_g)
            )

        # Sum over pairs and prepare for broadcasting
        Fphon = result.sum(dim=-1).view(1, N_Z, N_g)
    else:
        Fphon = 0.0

    # Relativistic correction
    gamma = (voltage_kV + 511.0) / 511.0  # [N_V, 1, 1]

    # EMsoft: with relativistic correction gamma, and DWF multiplied in
    if return_type == "EMsoft":
        # Expand Freal to match voltage dimension and multiply by DWF and gamma
        f_real_corrected = f_real * dwf * gamma  # [N_V, N_Z, N_g]

        # Combine all contributions (Fphon already has DWF included)
        f_imag = (
            (Fcore * dwf + Fphon) * gamma**2 / (4.0 * torch.pi * k0)
        )  # [N_V, N_Z, N_g]

        # clamp f_image to be positive (absorptive)
        f_imag = torch.clamp(f_imag, min=0.0)

        f_scatt = torch.view_as_complex(torch.stack((f_real_corrected, f_imag), dim=-1))

        # unlike py4DSTEM's current code no factor of 0.04787801 or (0.4787801)
        # from "CalcUcg" in EMsoft to go from V to U... also we do not yet remove
        # physicist factor: 2.0 * sngl(cRestmass*cCharge/cPlanck**2)*1.0E-18 =
        # 0.664840340614319 both will be done when computing Ucg

    # ITC: real-valued without gamma, without DWF
    elif return_type == "ITC":
        f_scatt = f_real
    else:
        raise ValueError(f"return_type must be 'EMsoft' or 'ITC', got {return_type}")

    return f_scatt
